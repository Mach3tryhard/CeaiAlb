//Solutii Seminar 5 PC

//Ex. 1
#include <stdio.h>
#include <stdlib.h>

void poz(int *v, int n) {
    for (int i = 0; i < n; i++) {
        if (v[i] > 0) {
            v[i] = 0;
        }
    }
}

int neg(int **v, int *n) {
    int *v1 = (int *)malloc(*n * sizeof(int));

    int index = 0;
    for (int i = 0; i < *n; i++) {
        if ((*v)[i] >= 0) {
            v1[index++] = (*v)[i];
        }
    }

    *n = index;
    *v = v1;

    return 1;
}

int medie(int *v, int n)
{
    float medie = 0.0;int k = 0;
    for(int i = 0; i < n;i++)
    {
        if(v[i] >= 0)
        {
            medie = (float) medie + v[i];
            k++;
        }

    }
    return (float) medie / k;
}

int cautare(int *v, int n, int k)
{
    int ok = 0;
    for(int i = 0; i < n; i++)
    {
        if(v[i] == k)
        {
            ok++;
            break;
        }
    }
    if(ok > 0)
        return 1;
    else
        return 0;
}

int maxim(int *v, int n)
{
    int maxim = v[0];
    for(int i = 0; i < n;  i++)
    {
        if(maxim < v[i])
            maxim = v[i];
    }
    return maxim;

}

int main() {
    int n, k;

    printf("Introduceti dimensiunea tabloului: ");
    scanf("%d", &n);
    printf("Scrieti valoarea pe care doriti sa o cautati:");
    printf("\n");
    scanf("%d", &k);

    int *v = (int *)malloc(n * sizeof(int));

    printf("Introduceti %d elemente:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &v[i]);
    }

    printf("Tabloul initial:\n");
    for (int i = 0; i < n; i++) {
        printf("%d ", v[i]);
    }
    printf("\n");


    if (neg(&v, &n)) {
        printf("Tabloul dupa eliminarea valorilor negative:\n");
        for (int i = 0; i < n; i++) {
            printf("%d ", v[i]);
        }
        printf("\n");
    }

    printf("Media aritmetica este: %d\n",medie(v,n));
     printf("\n");

    if(cautare(v,n,k) == 1)
        printf("Valoarea este gasita");
    else
        printf("Valoarea nu este gasita");
         printf("\n");

        printf("Valoarea maxima este: %d\n", maxim(v,n));
         printf("\n");

        poz(v,n);

        printf("Tabloul dupa reducerea valorilor pozitive la 0:\n");
    for (int i = 0; i < n; i++) {
        printf("%d ", v[i]);
    }
    printf("\n");

    return 0;
}

 
//Ex. 2
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Comparator pentru qsort pentru a sorta sirurile dupa lungimea lor
int compare_lengths(int *a, int *b) {
    int len1 = (*(int**)a)[0];
    int len2 = (*(int**)b)[0];
    return (len1 - len2);
}

int main() {
    int n;
    int **arrays = (int**)malloc(n * sizeof(int*));

    printf("Introduceți numărul de șiruri: ");
    scanf("%d", &n);
    getchar(); // Consumăm newline-ul rămas de la scanf


    for (int i = 0; i < n; i++)
    {
        char line[1024];
        printf("Introduceți elementele șirului %d: ", i + 1);
        fgets(line, sizeof(line), stdin);

        int len = 0;
        int *temp = (int*)malloc(100 * sizeof(int)); // Alocare temporară

        char *token = strtok(line, " ");
        while (token != NULL)
        {
            temp[len++] = atoi(token);
            token = strtok(NULL, " ");
        }

        arrays[i] = (int*)malloc((len + 1) * sizeof(int));
        arrays[i][0] = len; // Prima poziție stochează lungimea șirului
        for (int j = 0; j < len; j++)
        {
            arrays[i][j + 1] = temp[j];
        }

        free(temp);
    }

    qsort(arrays, n, sizeof(int*), compare_lengths);

    // Afișăm șirurile sortate
    printf("Șirurile sortate sunt:\n");
    for (int i = 0; i < n; i++)
    {
        int len = arrays[i][0];
        for (int j = 1; j <= len; j++)
            printf("%d ", arrays[i][j]);

        printf("\n");
        free(arrays[i]); // Eliberăm memoria pentru fiecare șir
    }

    free(arrays); // Eliberăm memoria pentru array-ul de pointeri
    return 0;
}
 
//Ex. 3
#include <stdio.h>
#include <stdlib.h>

void foo(int **mat, int l1, int l2, int nrC) {
    int *tmp = mat[l1];
    mat[l1] = mat[l2];
    mat[l2] = tmp;
}

int main() {
  int nrC, nrL;
  scanf("%d %d", &nrC, &nrL);
  printf("%d %d \n", nrC, nrL);
  int **mat = (int**)malloc(nrL * sizeof(int *));
  for (int i = 0; i < nrL; i++) {
    mat[i] = (int *)calloc(nrC, sizeof(int));
    printf("Linia i: %p \n", mat[i]);
  }

  int l1, l2;
  scanf("%d %d", &l1, &l2);
  for (int i = 0; i < nrL; i++) {
    for (int j = 0; j < nrC; j++) {
      scanf("%d", &mat[i][j]);
    }
  }
  foo(mat, l1, l2, nrC);
  for (int i = 0; i < nrL; i++) {
    for (int j = 0; j < nrC; j++) {
      printf("%3d ", mat[i][j]);
    }
    printf("\n");
  }
  free(mat);
}


//Ex. 2
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int cmp_int(const void *a, const void *b) {
    return (*(int *)a - *(int *)b);
}

int cmp_length(const void *a, const void *b) {
    int **arr1 = (int **)a;
    int **arr2 = (int **)b;
    int len1 = (*arr1)[0];
    int len2 = (*arr2)[0];
    return len1 - len2;
}

int *citire_sir(int *lungime) {
    char linie[1024];
    if (fgets(linie, sizeof(linie), stdin) == NULL) {
        return NULL;
    }

    int *sir = NULL;
    int capacitate = 0;
    *lungime = 0;

    char *token = strtok(linie, " \n");
    while (token != NULL) {
        if (*lungime >= capacitate) {
            capacitate = (capacitate == 0) ? 4 : capacitate * 2;
            sir = realloc(sir, (capacitate + 1) * sizeof(int));
            if (sir == NULL) {
                perror("Alocare memorie eșuată");
                exit(1);
            }
        }

        sir[*lungime + 1] = atoi(token);
        (*lungime)++;
        token = strtok(NULL, " \n");
    }

    if (sir != NULL) {
        sir[0] = *lungime;
    }
    return sir;
}

int main() {
    int n;
    printf("Introduceți numărul de șiruri: ");
    if (scanf("%d", &n) != 1 || n <= 0) {
        fprintf(stderr, "Eroare: număr invalid.\n");
        return 1;
    }
    getchar();

    int **siruri = malloc(n * sizeof(int *));
    if (siruri == NULL) {
        perror("Alocare memorie eșuată");
        return 1;
    }

    for (int i = 0; i < n; ++i) {
        printf("Introduceți șirul %d (numere separate prin spații): ", i + 1);
        int lungime = 0;
        siruri[i] = citire_sir(&lungime);

        if (siruri[i] == NULL || lungime == 0) {
            fprintf(stderr, "Eroare la citirea șirului %d.\n", i + 1);
            for (int j = 0; j < i; ++j) {
                free(siruri[j]);
            }
            free(siruri);
            return 1;
        }

        qsort(&siruri[i][1], lungime, sizeof(int), cmp_int);
    }

    qsort(siruri, n, sizeof(int *), cmp_length);

    printf("\nȘirurile sortate:\n");
    for (int i = 0; i < n; ++i) {
        for (int j = 1; j <= siruri[i][0]; ++j) {
            printf("%d ", siruri[i][j]);
        }
        printf("\n");
        free(siruri[i]);
    }

    free(siruri);
    return 0;
}


//Ex. 3
#include <iostream>
#include <stdlib.h>
#include <stdio.h>

using namespace std;

int main(){
    int **mat ,m,n,p,q,aux;
    scanf("%d",&m);
    scanf("%d",&n);
    mat = (int**)malloc(m * sizeof(int*));
    for(int i=0; i<n;i++)
        mat[i]=(int*)malloc(n * sizeof(int));

     for(int i=0; i<m;i++){
         for(int j=0; j<n;j++){
            scanf("%d",&mat[i][j]);}}

    scanf("%d",&p);
    scanf("%d",&q);

     for(int i=0; i<m;i++){
        aux=mat[p][i];
        mat[p][i]=mat[q][i];
        mat[q][i]=aux;}

     for(int i=0; i<n;i++){
         for(int j=0; j<m;j++){
            printf("%d ",mat[i][j]);}
            printf("\n");
     }
    return 0;
}
 
//Ex 1:
#include <stdio.h>
#include <stdlib.h>
void redus0(int *v, int n){
    for (int i = 0; i<n; i++){
        if (v[i] > 0){
            v[i] = 0;
        }
    }
}
 
float media_arit(int *v, int n){
    int nr = 0, sum = 0;
    for(int i = 0; i < n; i++){
        if(*(v+i) > 0){
            nr++;
            sum += *(v+i);
        }
    }
    if(nr != 0)
        return (float)sum/nr;
    else
        return nr;
}
 
int cautare(int *v, int n, int x)
{
    int i,ok=0,poz;
    for(i=0;i<n && !ok;i++) 
    {
        if(*(v+i)==x) 
        {
            ok=1;
            poz=i;
        }
    }
    if(ok==1) return poz;
    else return -1;
  }
 
int maxim (int *v, int n)
{
    int maxi = *v;
    for(int i = 0; i<n; i++)
        if(*(v+i) > maxi)
            maxi = *(v+i);
    
    return maxi;
}
 
int *eliminare(int *v, int *n)
{
    int counter = 0;
    
    for(int i = 0; i < *n; i++)
        if(*(v+i) < 0)
        {   for(int j = i; j < *n - 1; j++)
                *(v + j) = *(v + j + 1);
            
            counter++;
        }
    
    *n -= counter;
    v = (int*)realloc(v, *n * sizeof(int));
    
    return v;
}
int main (){
    int *v, n, x;
    scanf("%d", &n);
    v = (int*)malloc(n*sizeof(int));
    for (int i = 0; i<n; i++){
        scanf("%d", &v[i]);
    }
    //redus0(v, n);
    //float ma = media_arit(v, n);
    //printf("%.2f\n", ma);
    //scanf("%d",&x);
    //printf("%d \n",cautare(v,n,x));
    //printf("%d \n", maxim(v, n));
    
    v = eliminare(v,&n);
    
    for (int i = 0; i<n; i++){
        printf("%d ", v[i]);
    }
    return 0;
}

//4 si 5 partial
#include <stdio.h>
#include <stdlib.h>
 
void citafis(FILE *file)
{
    int n, **v;
    fscanf(file, "%d", &n);
    
    v = (int **)malloc(n * sizeof(int*));
    for(int i = 0; i < n; i++)
    {
        v[i] = malloc((i+1) * sizeof(int));
        for( int j = 0; j <= i; j++)
        {
            fscanf(file, "%d", &v[i][j]);
        }
    }
    
       
    for(int i = 0; i < n; i++)
    {
        for( int j = 0 ; j <= i; j++)
        {
            printf("%d ", v[i][j]);
        }
        printf("\n");
    }
        
}
 
int main()
{
    int **p, n;
    FILE *file = fopen("mat.txt", "r");
    //citafis(file);
    
   
    
    FILE *file1 = fopen("mat1.txt", "r");
    
    fscanf(file1, "%d", &n);
    
    p = (int **)malloc(n * sizeof(int *));
    
    for(int i = 0; i < n; i++)
    {
        p[i]=malloc((n-i) * sizeof(int));
        for(int j = 0; j < n-i; j++)
        {
            fscanf(file1, "%d", &p[i][j]);
        }
    }
    
    for(int i = 0; i < n; i++)
    {
        for( int j = 0 ; j < n-i; j++)
        {
            printf("%d ", p[i][j]);
        }
        printf("\n");
    }
    return 0;
}

